//---------------------------------------------------------------
//        Go4 Framework release package V.1.0000
//                      24-May-2002
//---------------------------------------------------------------
//   The GSI Online Offline Object Oriented (Go4) Project
//   Experiment Data Processing at DVEE department, GSI
//---------------------------------------------------------------
//
//Copyright (C) 2000- Gesellschaft f. Schwerionenforschung, GSI
//                    Planckstr. 1, 64291 Darmstadt, Germany
//Contact:            http://go4.gsi.de
//----------------------------------------------------------------
//This software can be used under the license agreements as stated
//in Go4License.txt file which is part of the distribution.
//----------------------------------------------------------------
/* Generated by Together */

#include "TIFJCalibratedEvent.h"

#include "TIFJCalibrateProcessor.h"
// #include "Go4EventServer/TGo4TreeSource.h"
// #include "Go4EventServer/TGo4FileSource.h"


//*************************************************************************
void TIFJCalibratedEvent::Clear(string  t)
{
//     TRACE((11,"TIFJCalibratedEvent::Clear()",__LINE__, __FILE__));

    // zeroing new members


    char *ptr = (char *) & begin_for_zeroing ;
    char *kon_ptr = (char *) & end_for_zeroing ;

    while(ptr < kon_ptr)
        * (ptr++) = 0 ;

//     sci21_position = -50;
//     sci41horiz_position = -60 ;
//     sci41vertic_position = -70;

}
//*************************************************************************
int TIFJCalibratedEvent::Fill()
{
    //TRACE((11,"TIFJCalibratedEvent::Fill()",__LINE__, __FILE__));
    //TGo4TraceSingleton* tr=TGo4TraceSingleton::Instance();
    // check for different source types
    int rev = -1;

    cout << "Jestem TIFJCalibratedEvent::Fill() " << endl ;
#ifdef NOGO4

    TIFJCalibrateProcessor* proc;
    proc = (TIFJCalibrateProcessor*) GetEventSource();
    Clear();
    proc->BuildCalibratedEvent(this);
    rev = 0;


#endif



    //     cout << "Jestem TIFJCalibratedEvent::Fill() line " << __LINE__ <<  " " << __FILE__
    //     << " rev = " << rev << endl ;
    return rev;


}
//***************************************************************************************
TIFJCalibratedEvent::~TIFJCalibratedEvent()
{
//     TRACE ( ( 12,"TIFJCalibratedEvent::~TIFJCalibratedEvent()",__LINE__, __FILE__ ) );

}
//*********************************************************************************
TIFJCalibratedEvent::TIFJCalibratedEvent()
    : TjurekAbstractEventElement("Calibrated")
{
//     TRACE ( ( 12,"TIFJCalibratedEvent::TIFJCalibratedEvent()",__LINE__, __FILE__ ) );
    TIFJCalibratedEvent::Clear();

}
/** No descriptions ***********************************************************/
// DUMMY FUNCTION
void TIFJCalibratedEvent::set_value(double v)
{
    /*
       cate_dE = v ;
       cate_E = v + 5;
    */
    cout << "Empty function TIFJCalibratedEvent::set_value(double v)" << endl;
}

//*********************************************************************************

