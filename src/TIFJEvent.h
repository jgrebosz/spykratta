//---------------------------------------------------------------
//        Go4 Framework release package V.1.0000
//                      24-May-2002
//---------------------------------------------------------------
//   The GSI Online Offline Object Oriented (Go4) Project
//   Experiment Data Processing at DVEE department, GSI
//---------------------------------------------------------------
//
//Copyright (C) 2000- Gesellschaft f. Schwerionenforschung, GSI
//                    Planckstr. 1, 64291 Darmstadt, Germany
//Contact:            http://go4.gsi.de
//----------------------------------------------------------------
//This software can be used under the license agreements as stated
//in Go4License.txt file which is part of the distribution.
//----------------------------------------------------------------
/* Generated by Together */

#ifndef TEBEVENT_H
#define TEBEVENT_H

#include "tjurekabstracteventelement.h"

#include "experiment_def.h"
#include <vector>
#include <string>
#include <fstream>
///////////////////////////////////////////////////////////////////////////////////////////
class TIFJEvent : public TjurekAbstractEventElement
{
public:
    TIFJEvent() ;
    virtual ~TIFJEvent() ;
    /**
     * Method called by the event owner (analysis step) to fill the
     * event element from the set event source. Event source can
     * be the source of the analysis step (if this is a raw event) or the event processor (if this is a reduced event).
     * Fill method has to specify how the event source writes to the
     * members of this event structure. Either by calling methods of
     * the source (like myevent.a=fxEventSource->GetA(); etc ), or by
     * direct copy to the member (like fxEventSource->FillMemoryAt(&myevent.a);)
     */
    virtual int Fill();

    /**
     * Method called by the event owner (analysis step) to clear the
     * event element.
     */
    virtual void Clear(string t = "");
    virtual void SetValid(bool /*t*/) { }
    
    void save_as_semitree(std::string);
    ofstream plik;

    // december 2001 experiment
    int begin_for_zeroing ;   //!

    #if 0
    int
    //............................
    // for the new style of object calculation we define
    // this once more here

    mw11_x_left, mw11_x_right, mw11_y_up, mw11_y_down, mw11_anode,
                 mw21_x_left, mw21_x_right, mw21_y_up, mw21_y_down, mw21_anode,
                 mw22_x_left, mw22_x_right, mw22_y_up, mw22_y_down, mw22_anode,
                 mw31_x_left, mw31_x_right, mw31_y_up, mw31_y_down, mw31_anode,
                 mw41_x_left, mw41_x_right, mw41_y_up, mw41_y_down, mw41_anode,
                 mw42_x_left, mw42_x_right, mw42_y_up, mw42_y_down, mw42_anode,


                 sc21_de_l,
                 sc21_de_r,
                 sc21_l_sc21_r_dt,



                 sc41_de_l,
                 sc41_de_r,
                 sc41_l_sc41_r_dt,

                 sc41_de_up,
                 sc41_de_dn,
                 sc41_dt_up_dn,

                 sc42_de_l,
                 sc42_de_r,
                 sc42_l_sc42_r_dt,

                 sc43_de_l,
                 sc43_de_r,
                 sc43_l_sc43_r_dt,

                 sc21_l_sc41_l_dt,      // tof
                 sc21_r_sc41_r_dt,    // tof

                 sc42_l_sc41_l_dt,    // tof
                 sc42_r_sc41_r_dt,    // tof

                 sc41_l_sc43_l_dt,    // tof
                 sc41_r_sc43_r_dt,   // tof

#ifdef MUSICBIG_USED
                 // old style music with 4 electrodes
                 musicBig41_time[4] ,   // begin of array
                 musicBig41_energy[4],
#ifdef MUSIC42_USED
                 musicBig42_time[4] ,   // begin of array
                 musicBig42_energy[4],
#endif
#else    // MUSICBIG_USED
                 // the eight anode version
                 music_8_time[8] ,
                 music_8_energy[8],
                 music_8_press_raw ,
                 music_8_temp_raw ,

#ifdef MUSIC42_USED
                 music42_8_time[8] ,
                 music42_8_energy[8],
#endif // MUSIC42_USED
#endif // MUSICBIG_USED

           int       frs_synchro_data;

#endif // 0

    // target scintillator
    int target_scintillator_x ;
    int target_scintillator_y ;

    int module_vmeOne_0[32];  //!   (will not be streamed )
    int module_vmeOne_1[32];  //!   (will not be streamed )
    int module_vmeOne_2[32];  //!   (will not be streamed )
    int module_vmeOne_3[32];  //!   (will not be streamed )
    int module_vmeOne_4[32];  //!   (will not be streamed )

    int module_vmeOne_5[32];  //!   (will not be streamed )
    int module_vmeOne_6[32];  //!   (will not be streamed )
    int module_vmeOne_7[32];  //!   (will not be streamed )
    int module_vmeOne_8[32];     //!   (will not be streamed )
    int module_vmeOne_9[32];   //!   (will not be streamed )
    int module_vmeOne_11[32];    //!   (will not be streamed )
    int module_vmeOne_13[32];    //!   (will not be streamed )
    int module_vmeOne_15[32];    //!   (will not be streamed )
    int module_vmeOne_16[32];    //!   (will not be streamed )
    int module_vmeOne_17[32];    //!   (will not be streamed )
    int module_vmeOne_18[32];    //!   (will not be streamed )
    int module_vmeOne_19[32];    //!   (will not be streamed )

    // the so called Frs User crate
    int module_vmeUser_5[32];  //!   (will not be streamed )
    int module_vmeUser_6[32];  //!   (will not be streamed )
    int module_vmeUser_8[32];     //!   (will not be streamed )
    int module_vmeUser_9[32];   //!   (will not be streamed )
    int module_vmeUser_11[32];    //!   (will not be streamed )
    int module_vmeUser_13[32];    //!   (will not be streamed )
    int module_vmeUser_15[32];    //!   (will not be streamed )
    int module_vmeUser_16[32];    //!   (will not be streamed )
    int module_vmeUser_17[32];    //!   (will not be streamed )
    int module_vmeUser_18[32];    //!   (will not be streamed )
    int module_vmeUser_19[32];    //!   (will not be streamed )

    //---------

    int trigger;  // info word send in the go4 structure as parameter trigger
    //#endif



#ifdef FRS_PATTERN_MODULE_PRESENT
    int frs_pattern_module;
#endif

#ifdef    ACTIVE_STOPPER_PRESENT

    int active_stopper[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];

    int active_stopper_fired[HOW_MANY_STOPPER_MODULES][2];   //!

    long active_stopper_timestamp_low;
    long active_stopper_timestamp_middle;
    long active_stopper_timestamp_high;

#ifdef ACTIVE_STOPPERS_SECOND_AND_THIRD_HIT_IN_THE_TIME_GATE

    int active_stopper_hit2[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper_hit2_fired[HOW_MANY_STOPPER_MODULES][2];   //!

    int active_stopper_hit3[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper_hit3_fired[HOW_MANY_STOPPER_MODULES][2];   //!
#endif


#ifdef ACTIVE_STOPPERS_HAVE_TIME_INFORMATION
    int active_stopper_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];

#ifdef ACTIVE_STOPPERS_SECOND_AND_THIRD_HIT_IN_THE_TIME_GATE

    int active_stopper_hit2_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];

    int active_stopper_hit3_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
#endif

#endif
#endif

#ifdef    ACTIVE_STOPPER2_PRESENT
    int active_stopper2[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper2_fired[HOW_MANY_STOPPER_MODULES][2];   //!

#ifdef ACTIVE_STOPPERS_SECOND_AND_THIRD_HIT_IN_THE_TIME_GATE
    int active_stopper2_hit2[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper2_hit2_fired[HOW_MANY_STOPPER_MODULES][2];   //!

    int active_stopper2_hit3[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper2_hit3_fired[HOW_MANY_STOPPER_MODULES][2];   //!
#endif


#ifdef ACTIVE_STOPPERS_HAVE_TIME_INFORMATION
    int active_stopper2_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];

#ifdef ACTIVE_STOPPERS_SECOND_AND_THIRD_HIT_IN_THE_TIME_GATE
    int active_stopper2_hit2_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper2_hit3_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
#endif

#endif
#endif

#ifdef    ACTIVE_STOPPER3_PRESENT

    int active_stopper3[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper3_fired[HOW_MANY_STOPPER_MODULES][2];   //!

#ifdef ACTIVE_STOPPERS_SECOND_AND_THIRD_HIT_IN_THE_TIME_GATE

    int active_stopper3_hit2[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper3_hit2_fired[HOW_MANY_STOPPER_MODULES][2];   //!
    int active_stopper3_hit3[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
    int active_stopper3_hit3_fired[HOW_MANY_STOPPER_MODULES][2];   //!
#endif


#ifdef ACTIVE_STOPPERS_HAVE_TIME_INFORMATION

    int active_stopper3_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];

#ifdef ACTIVE_STOPPERS_SECOND_AND_THIRD_HIT_IN_THE_TIME_GATE

    int active_stopper3_hit2_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];

    int active_stopper3_hit3_time[HOW_MANY_STOPPER_MODULES]
    [NR_OF_STOPPER_STRIPES_X + NR_OF_STOPPER_STRIPES_Y];
#endif

#endif

#endif

#ifdef MULTIHIT_V1290_PRESENT
    int multihit_v1290[32];
#endif

//###################################### EXOTIC ##############


//##################################### PISOLO ###############








#ifdef HECTOR_PRESENT

    // data for Hector
    int16_t hector_tdc[PLASTIC_HOW_MANY_TDC_ADC_CHANNELS];
    int16_t hector_adc[PLASTIC_HOW_MANY_TDC_ADC_CHANNELS];
    // data for phoswitch Hector
    int16_t phoswich_tdc[PLASTIC_HOW_MANY_TDC_ADC_CHANNELS];
    int16_t phoswich_adc[PLASTIC_HOW_MANY_TDC_ADC_CHANNELS];



    int32_t digitizer_data[NR_DIGITIZERS * 3*16];    //(96 because= 32 time + 32Fast + 32 Slow)
    double digitizer_double_data[NR_DIGITIZERS* 3*16];

    //int16_t hector_to_vme_synchro_signal;
#endif


#ifdef KRATTA_PRESENT
    int16_t kratta[KRATTA_NR_OF_CRYSTALS][3+3+3] ;   // 0,1,2 - signals, 3,4,5 - pedestals, 6,7,8 - times
    int16_t plastic[KRATTA_NR_OF_PLASTICS]; // [2] ;   // 0 = time   (1 =energy not used)
    int32_t plastic_scalers[KRATTA_NR_OF_PLASTICS];
    int silicon[NR_OF_SILICONS][3]; // amplitude, time30, time80

#endif

    int end_for_zeroing ;  //! dummy member to recognize end for memset function

    // below are fields, which should not be zeroed


public:

};
#endif //TEBEVENT_H
