//---------------------------------------------------------------
//        Go4 Framework release package V.1.0000
//                      24-May-2002
//---------------------------------------------------------------
//   The GSI Online Offline Object Oriented (Go4) Project
//   Experiment Data Processing at DVEE department, GSI
//---------------------------------------------------------------
//
//Copyright (C) 2000- Gesellschaft f. Schwerionenforschung, GSI
//                    Planckstr. 1, 64291 Darmstadt, Germany
//Contact:            http://go4.gsi.de
//----------------------------------------------------------------
//This software can be used under the license agreements as stated
//in Go4License.txt file which is part of the distribution.
//----------------------------------------------------------------
/* Generated by Together */

#ifndef TEBCALIBRATEDEVENT_H
#define TEBCALIBRATEDEVENT_H

#include "tjurekabstracteventelement.h"

#include "experiment_def.h"

#include <string>
using namespace std;

// NOTE:  how to make the new item here
// 1. it has to be and incrementer. If it is not, make it at first
// 2. Make here in this file the entry for this new variiable
//     for example:    double    my_data;
// 3. Gto to the funciton
//  void TIFJAnalysis::put_data_to_ntuple()
// and somwhere on its end, type the folowing instruction
/*
   ntuple_entry_vector.push_back(
      ntuple_entry_data("name of the chosen incremeter"
                        &fxCaliEvent->my_data,     // name of the item in this tree
                        true or false    // true - if we do not want to put the value if the incremeter is valid (so the ZERO will be here in ntuple)
                                              //   false - if we want to copy even if it is not valid, - so for example contains value -999999
                                              //             sometimes this last approach is better. It is better to have -9999 than 0
                        ));
*/

class TIFJCalibrateProcessor ;

///////////////////////////////////////////////////////////////////////////////
/**
 * Class containing calibrated event structure of EB example analysis.
 * @author j. Adamczewski
 * @since 23-feb-2001
 */


/////////////////////////////////////////////////////////////////////////////////////////////////////

class TIFJCalibratedEvent : public TjurekAbstractEventElement
{
public:

    TIFJCalibratedEvent() ;
    virtual ~TIFJCalibratedEvent() ;
    /**
     * Method called by the event owner (analysis step) to fill the
     * event element from the set event source. Event source can
     * be the source of the analysis step (if this is a raw event)
     or the event processor (if this is a reduced event).
     * Fill method has to specify how the event source writes to the
     * members of this event structure. Either by calling methods of
     * the source (like myevent.a=fxEventSource->GetA(); etc ), or by
     * direct copy to the member (like fxEventSource->FillMemoryAt(&myevent.a);)
     */
    virtual int Fill();

    /**
     * Method called by the event owner (analysis step) to clear the
     * event element.
     */
    virtual void Clear(string t = "");

    /** for my testing purposes */
    void set_value(double v);


    // members of the Real Rising experiment ==================================
    int begin_for_zeroing ;   //! dummy member to recognize begin for memset function

    double mw_41_x, mw_41_y;
    double mw_42_x, mw_42_y;

    double sci21_position,
           sci41horiz_position,
           sci41vertic_position;

    double tof_ps ;



    double beta; // Franco wants this





#if CURRENT_EXPERIMENT_TYPE == G_FACTOR_OCTOBER_2005
    int xia_P_time_minus_Ge_time_OR_raw;
    int vxi_P_time_minus_Ge_time_OR_raw;
#endif

#ifdef VXI_ELECTRONICS_FOR_GERMANIUMS_PRESENT
    int Rising_crystal_multiplicity;
#endif

#ifdef XIA_ELECTRONICS_FOR_GERMANIUMS_PRESENT
    int Rising_crystal_xia_multiplicity;
#endif

#if defined TPC41_PRESENT || defined TPC42_PRESENT
    // NOTE: here we assume that there is maximum 4 tpc in the setup
    double      tpc_x[4],
                tpc_y[4];
    int               tpc_check_sum[4][TPC_NR_OF_DRIFT_TIMES] ;
#endif


#ifdef    MUN_ACTIVE_STOPPER_PRESENT
    // raw values copied from unpacked event TIFJEvent
    // specially for Christoph Hinke
#ifdef RAW_DATA_MUNICH_ACTIVE_STOPPER_IN_THE_ROOT_TREE
    int munich_active_stopper[NR_OF_MUN_STOPPER_MODULES]
    [NR_OF_MUN_STOPPER_STRIPES_X + NR_OF_MUN_STOPPER_STRIPES_Y];
#endif  // RAW_DATA_MUNICH_ACTIVE_STOPPER_IN_THE_ROOT_TREE

#endif  //    MUN_ACTIVE_STOPPER_PRESENT


#ifdef    TRACKING_IONISATION_CHAMBER_X
#ifdef RAW_DATA_MUNICH_TIC_IN_THE_ROOT_TREE
    int tic21_data
    [TRACKING_IONISATION_CHAMBER_X + TRACKING_IONISATION_CHAMBER_Y];

    int tic22_data
    [TRACKING_IONISATION_CHAMBER_X + TRACKING_IONISATION_CHAMBER_Y];

#endif // RAW_DATA_MUNICH_TIC_IN_THE_ROOT_TREE
#endif // TRACKING_IONISATION_CHAMBER_X


    // Katrin, put your new entries here
    int mw41_x_left;   // for Katrin - to show  how to make entries in the tree
    int music_8_energy[8];    // for Katrin - to show  how to make entries in the tree



    // end of everything -----------------------------
    int end_for_zeroing ;  //!  dummy member to recognize end for memset function


//  ClassDef(TIFJCalibratedEvent,1)
};

#endif //TEBCALIBRATEDEVENT_H
